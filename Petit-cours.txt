Cet exercice a pour objectif de mettre en pratique
les notions que vous avez acquises dans les deux
premières parties de ce cours sur Git et Github.

Vous devez créer un repository Git simple contenant :

Un fichier nommé "README.txt" qui présente le projet;
Au moins 2 autres fichiers de votre choix (ils peuvent
contenir des scripts de code, du texte sur un projet
personnel...);
Au moins 4 commits distincts montrant l’ajout puis la
modification de certains fichiers.
Prêtez attention à la qualité de vos messages de commit
et essayez d’être précis. Par exemple, évitez des
commentaires comme “commit 1”, “commit 2” etc.
qui n'expliquent pas les modifications que vous
avez effectuées.

Une fois que vous avez créé votre repository Git,
envoyez-le sur GitHub, puis copiez l’URL du
repository GitHub créé spécialement pour cette activité
Format:
https://github.com/votrenomd'utilisateur/votreprojet
Par exemple, voici l'URL du repository GitHub
nommé "Simple-Placeholder"
que j'ai créé pour cette activité : https://github.com/marcgg/Simple-Placeholder

Enfin, téléchargez ce document texte.
Indiquez votre URL après "L'URL de mon repository
sur GitHub" dans ce document texte, et enregistrez-le.
Pour envoyer votre travail, compressez le document .txt
que vous avez modifié dans un fichier .zip,
et envoyez ce .zip.


Notions sur Git & Github

Petit rappel sur la console:

pwd - Connaitre son répertoire courrant
ls - Voir les fichiers dans le répertoire courrant
ls -l voir les éléments ls -a + d'informations
ls -la = ls -l -a
cd - Se déplacer dans un repertoire
(Je cherche la commande pour revenir dans le repertoire précedent..)
touch fichier-a-creer.txt - créer un fichier
mkdir repertoire-a-creer - creer un dossier
cat - afficher contenu du fichiers
J'utilise ATOM comme editeur de texte, je peut installer
les "Shell Commands" et activer la fonction
atom fichier-a-editer.txt (raccourci apm)

Configurer Git
Après avoir installer Git
git config --global user.name "Votre nom ou pseudo"
git config --global user.email "Votre@email.com"

git init - permet d'initialiser Git dans le repertoire
git status - permet d'avoir des informations sur le travail actuel
git add permet d'ajouter le fichier à l'index de Git
git commit -m "Message de commit" permet de commit
git -a pour mettre a jour
git log permet de suivre l'historique des commit
Numéro SHA - identifiant du commit
git checkout SHA - aller sur le commit
git checkout master -  aller sur la branche principale
git revert SHA - annuler commit (inverse)
git commit --amend -m "Nouveau Message" - changer msg commit
git reset --hard - Annuler tout les changements

GitHub
git clone https://lien-github - cloner le repertoire de GitHub
git push origin master - envoyer modifications sur Repo Github depuis origin
git pull origin master - recevoir modification
